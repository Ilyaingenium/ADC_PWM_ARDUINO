
motor wiht knob.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  0000089b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038b  00000000  00000000  00000eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006903  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00007b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000008d  00000000  00000000  00007b93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	25 d0       	rcall	.+74     	; 0xc0 <main>
  76:	44 c0       	rjmp	.+136    	; 0x100 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <ADC_settings>:

//Настройки АЦП
void ADC_settings (void)
{
	
	ADMUX |= (1<<REFS0); // Опорное напряжение - внешние 5 В
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	80 64       	ori	r24, 0x40	; 64
  82:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  84:	80 81       	ld	r24, Z
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	80 83       	st	Z, r24
	
	ADMUX &= ~(1<<ADLAR); // Правостороннее выравнивание
  8a:	80 81       	ld	r24, Z
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	80 83       	st	Z, r24
	
	ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1));// Задействуем 1-й вывод АЦП (РС1)
  90:	80 81       	ld	r24, Z
  92:	81 7f       	andi	r24, 0xF1	; 241
  94:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX0);
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); // Разрешаем работу АЦП
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Запуск преобразования АЦП
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADATE); // Режим непрырывного измерения
  ac:	80 81       	ld	r24, Z
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	80 83       	st	Z, r24
	
	ADCSRA &= ~(1<<ADPS2); //делим частоту Мк на 8 - Устанавливаем частоту преобразования АЦП 125 000 Гц такие цифры нужны чтобы более точно отслеживать изменения (рекомендуется от 50 до 200 КГц)
  b2:	80 81       	ld	r24, Z
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0);
  b8:	80 81       	ld	r24, Z
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <main>:
int main(void)
{
	
	
	//Вход АЦП
	DDRC &= ~(1<<1);
  c0:	39 98       	cbi	0x07, 1	; 7
	
	ADC_settings ();
  c2:	db df       	rcall	.-74     	; 0x7a <ADC_settings>
	
	while (1)
	{
		
		if (ADCSRA&(1<<ADIF)) // проверяем наличие 1 в реестре. Если 0, то начинаем считывание ацп.
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
		{
			
			if (ADC <= 200)
  c8:	a8 e7       	ldi	r26, 0x78	; 120
  ca:	b0 e0       	ldi	r27, 0x00	; 0
	ADC_settings ();
	
	while (1)
	{
		
		if (ADCSRA&(1<<ADIF)) // проверяем наличие 1 в реестре. Если 0, то начинаем считывание ацп.
  cc:	80 81       	ld	r24, Z
  ce:	84 ff       	sbrs	r24, 4
  d0:	fd cf       	rjmp	.-6      	; 0xcc <main+0xc>
		{
			
			if (ADC <= 200)
  d2:	8d 91       	ld	r24, X+
  d4:	9c 91       	ld	r25, X
  d6:	11 97       	sbiw	r26, 0x01	; 1
  d8:	89 3c       	cpi	r24, 0xC9	; 201
  da:	91 05       	cpc	r25, r1
  dc:	18 f4       	brcc	.+6      	; 0xe4 <main+0x24>
			{
				PORTB |= (1<<0); // Green LED ON
  de:	28 9a       	sbi	0x05, 0	; 5
				PORTB &= ~(1<<1); // Yellow LED OFF
  e0:	29 98       	cbi	0x05, 1	; 5
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x28>
			}
			else
			{
				PORTB &= ~(1<<0); // Green LED ON
  e4:	28 98       	cbi	0x05, 0	; 5
				PORTB &= ~(1<<1); // Yellow LED OFF
  e6:	29 98       	cbi	0x05, 1	; 5
			}
						
			if (ADC >= 600)
  e8:	8d 91       	ld	r24, X+
  ea:	9c 91       	ld	r25, X
  ec:	11 97       	sbiw	r26, 0x01	; 1
  ee:	88 35       	cpi	r24, 0x58	; 88
  f0:	92 40       	sbci	r25, 0x02	; 2
  f2:	10 f0       	brcs	.+4      	; 0xf8 <main+0x38>
			{
				PORTB |= (1<<0); // Green LED ON
  f4:	28 9a       	sbi	0x05, 0	; 5
				PORTB |= (1<<1); // Yellow LED OFF
  f6:	29 9a       	sbi	0x05, 1	; 5
			}
					
			ADCSRA |= (1<<ADIF); // устанавливаем бит в 1, останавливаем работу АЦП. В ноль сбросится сам через несколько тактов.
  f8:	80 81       	ld	r24, Z
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	80 83       	st	Z, r24
  fe:	e6 cf       	rjmp	.-52     	; 0xcc <main+0xc>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
